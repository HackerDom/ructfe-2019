import os
from base64 import b64decode, b64decode
from hashlib import md5, sha256
from json import dumps, loads

import asyncio

from api import API
from utils import split_message, split_signature, n_hash


HOSTNAME = 'localhost'
ALGO = 'stop'

async def get_pub_key(api, login):
    pub_key = await api.get_pub_key(ALGO, login)
    return list(map(bytes.fromhex, b64decode(pub_key['pub_key']).decode().split(',')))

async def put_flag(api, login, flag):
    signed = await api.sign(ALGO, login, flag)
    return bytes.fromhex(signed['s']), bytes.fromhex(signed['h'])

async def get_flag(api, login, s, h):
    verified = await api.verify(ALGO, login, s, h)
    return verified['data']

async def brute(i, parts):
    part = parts[i]
    while True:
        data = os.urandom(10).hex()
        note_hash = md5(dumps({'data': data}).encode()).digest()
        test_parts = list(split_message(note_hash, 8, 18))
        if test_parts[i] == part:
            return data


async def exploit():
    login = os.urandom(5).hex()
    flag = os.urandom(10).hex() + '=='

    async with API(HOSTNAME) as api:
        pub_key = await get_pub_key(api, login)
        s, h = await put_flag(api, login, flag)

        print('Real signature:', s.hex())
        print('Flag:', flag)

        parts = list(split_message(h, 8, 18))
        signature = split_signature(s, 16*2)

        fake_signature = []
        for i in range(len(parts)-2):
            test_flag = await brute(i, parts)
            test_s, test_h = await put_flag(api, login, test_flag)
            fake_signature.append(split_signature(test_s, 16*2)[i])
        fake_signature.extend(split_signature(test_s, 16*2)[-2:])
        fake_signature = b''.join(fake_signature)

        print('Fake signature:', fake_signature.hex())
        print('Recovered?', fake_signature == s)
        recovered_flag = await get_flag(api, login, fake_signature.hex(), h.hex())
        print('Flag from service:', recovered_flag)


if __name__ == '__main__':
    asyncio.run(exploit())