#!/usr/bin/env python3.8
from requests import Session
from string import ascii_lowercase
from random import choices, randint
from urllib.parse import urlparse, parse_qs
from base64 import urlsafe_b64encode
from hashlib import sha256


def gen_rand_string(k=10):
    return ''.join(choices(ascii_lowercase, k=k))


def get_creds():
    email = f'{gen_rand_string()}@{gen_rand_string(5)}.{gen_rand_string(2)}'
    password = gen_rand_string()
    return email, password


def generate_PKCE_codes():
    code_verifier = ''.join(choices(ascii_lowercase, k=100))
    code_challenge = urlsafe_b64encode(sha256(code_verifier.encode()).digest()).decode().replace('=', '')
    return code_verifier, code_challenge


def get_header_with_token(url):
    s = Session()
    email, password = get_creds()

    res = s.post(f'{url}/Identity/Account/Register',
                 headers={'Content-Type': 'application/x-www-form-urlencoded'},
                 data=f'Input.Email={email}&Input.Password={password}&Input.Role=Cook',
                 allow_redirects=False)
    if res.status_code != 302:
        print('[-] Registration fails')
        exit()
    print('[+] Register successfully')

    res = s.post(f'{url}/Identity/Account/Login',
                 headers={'Content-Type': 'application/x-www-form-urlencoded'},
                 data=f'Input.Email={email}&Input.Password={password}',
                 allow_redirects=False)

    if res.status_code != 302:
        print('[-] Can not log in')
        exit()
    print('[+] Log in successfully')

    code_verifier, code_challenge = generate_PKCE_codes()
    res = s.get(f"{url}/connect/authorize?"
                "client_id=Household&"
                "response_type=code&" +
                "scope=HouseholdAPI%20openid%20profile&"
                f"state={gen_rand_string(32)}&" +
                "response_mode=query&prompt=none&" +
                f"redirect_uri={url}/authentication/login-callback&" +
                "code_challenge_method=S256&" +
                f"code_challenge={code_challenge}",
                allow_redirects=False)

    if res.status_code != 302:
        print('[-] Start get token fails')
        exit()
    callback_query_parameters = parse_qs(urlparse(res.headers['Location']).query)

    res = s.post(f"{url}/connect/token",
                 headers={'Content-Type': 'application/x-www-form-urlencoded'},
                 data="client_id=Household&"
                      f"code={callback_query_parameters['code'][0]}&"
                      f"redirect_uri={url}/authentication/login-callback&"
                      f"code_verifier={code_verifier}&"
                      "grant_type=authorization_code",
                 allow_redirects=False)

    if res.status_code != 200:
        print('[-] Can not get token')
        exit()
    print('[+] Got token')
    json_res = res.json()
    s.close()

    # token = 'Bearer <access_token>'
    token = f'{json_res["token_type"]} {json_res["access_token"]}'

    return {'Authorization': token}


def add_product(token_header, manufacturer, url):
    product = {
        "name": gen_rand_string(),
        "protein": randint(1, 10),
        "fat": randint(1, 10),
        "carbohydrate": randint(1, 10),
        "calories": randint(1, 10),
        "manufacturer": manufacturer
    }
    res = Session().post(f"{url}/api/Products", json=product, headers=token_header, allow_redirects=False)
    if res.status_code != 201:
        print('[-] Can not add product')
        exit()
    print('[+] Product added')
    return res.json()


def create_dish(token_header, ingredients, url):
    payload = {
        "recipe": gen_rand_string(),
        "ingredients": ingredients,
        "name": gen_rand_string(),
        "description": gen_rand_string(),
        "portionWeight": randint(100, 200)
    }
    res = Session().post(f"{url}/api/Dishes", json=payload, headers=token_header, allow_redirects=False)
    if res.status_code != 201:
        print('[-] Can not create dish')
        exit()
    print('[+] Dish created')
    return res.json()


def get_dish(token_header, dish_id, url):
    res = Session().get(f"{url}/api/Dishes/{dish_id}", headers=token_header, allow_redirects=False)
    if res.status_code != 200:
        print('[-] Dish not found')
        return None
    return res.json()


def get_dishes(token_header, url, skip=0, take=100):
    res = Session().get(f"{url}/api/Dishes?take={take}&skip={skip}", headers=token_header, allow_redirects=False)
    if res.status_code != 200:
        print('[-] Dishes not found')
        return None
    return res.json()


def import_products_by_xml(token_header, products_xml, url):
    res = Session().post(f"{url}/api/products/import",
                         headers=token_header,
                         files={'xml': ('"xml"', products_xml)},
                         allow_redirects=False)
    if res.status_code != 200:
        print('[-] Can not import xml')
        return

    print('[+] Import xml successfully')
    return res.json()
